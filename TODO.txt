TODO {{{
[[[                                 the short list                              ]]] {{{
REMINDER(tso): terse desc != easy
 - SEE BUG #1
   - MAJOR PRIORITY
   - MOST ANNOYING THING EVER
   - I DON'T KNOW WHY IT DOESN'T EVEN PANIC ANYMORE AND JUST EXITS IMMEDIATELY
   - IT'S EITHER THE TabWidget OR THE RichEdit BUT I DON'T KNOW WHY

 - handle INVITE
 - this fucks up colors for some reason:
   22:26 <+wutno> >18<22t-f18>
 - /reconnect fails with "already connected to..." but only sometimes
 - /rejoin shouldn't close tab (fix /part first)
 - nick prefix not cleared on /rejoin (fix in NAMES? dunno)
 - multiple nick prefixes displayed when e.g *** ChanServ sets mode +ao user
 - nick color inconsistent (PRIVMSG vs ACTION)
 - tab creation synchronization
   - incorrect tabIndex during autojoin causes rendering error
 - mainWindow
   - resizes back to default after ShowWindow/ToggleBorderless/Transparency
     (might be unfixable due to aero snap, i've seen other applications
     exhibit similar behavior)
   - should display on top of all other windows when ShowWindow is toggled 
 - applyTheme() after Close()'ing multiple tabs seems to repaint nonexistent tabs
 - need more SetSuspended(true), Dispose(), Invalidate()
 - clean up tab_*.go 
 - Focus() isn't always being called
 - nicklist box resize behavior nonsense
 - implement fmtReverse
 - figure out a way to merge commandContext and tabWithContext
 - tab sort order
 - handle more ERR_* codes
 - openURL abstraction?
 - set richedit font to Universalia 8pt if any unicode in text
   - or around unicode bits of text only      
 - ctrl+f: search textBuffer
   - jump to selection
 - don't log lines if DISCONNECTED
 - don't display lines if not sent
    - e.g. cannot send to channel (+m)
 - don't open privmsg tab if not sent
    - e.g. no such nick/channel
 - limit scrollback to n lines 
 - load chatlog on join
 - settings dialog
 - hidejoinparts per channel(with list) or global
 - ignore list
 - highlight list
    - disable highlight
 - inline twitter links
}}}
[[[                                  the LONG list                              ]]] {{{
- channelList refactor {{{
   - always store all of the list results in a separate array on
     serverState structure instead of relying on channelListModel
     and add a Refresh button to channelList 
     which is disabled until we get ENDOFLIST
}}}
 - nick padding and color refactor {{{
   - use nick type instead of nick as string in more places
   - store color value in nickList
}}}
 - replace goirc refactor {{{
   - get OAUTH working
   - use atoi and fucking CONSTANTS_PLZ
   - catch-all for unhandled messages
   - handle connection errors
   - anti-flood
   - timeout
}}}
 - config.json {{{
     - load scripts at startup 
     - configurable font (and load at startup)
}}}
 - themes and stuff {{{
     - applying font breaks richedit fg color
       - reapplying /theme doesn't fix it but /clear does
       - not sure how to fix...
     - double-check we're applying styles correctly
       - sometimes have to call /theme multiple times to set the fg color in the
         richedit 
     - list of themes
     - custom/new themes
       - file based???
     - consider removing colors 16-98
       - I'm not sure anyone actually uses these on any network in the world
       - clash/unusable for e.g. nick colors 
     - consider embedding all those themes as data 
       - or store/load them as binary ([18][4]byte)
}}}
 - change behavior of commands: {{{
   - /nick {{{
     - update servState.user.nick regardless
}}}
   - /server {{{
     - double-check that we use servState.user.nick for new connections
}}}
   - /mode {{{
      - needs to be able to send just the channel e.g. MODE #test
        to get a reply of what the mode is
        expected: /mode #channel
                Mode for #channel is +CSnpstz
                /mode tso
                tso (221: +Sirx)
      - handle arguments in any order because I can never remember
}}}
   - /topic {{{
     
     expected: /topic
               Topic for #channel is "words" set by tso at 7/12/2018 11:54:18 PM
}}}
   - /part {{{
     - without closing tab
     - chanState tracks whether "connected" to channel?
}}}
   - /screenshot {{{
     - fix in windows classic mode
     - put a timeout on the POST and keep retrying until it succeeds
     - don't listen to that comment using net/http will add another 100 lines
       of code for literally no gain other than to say you did it the "right"
       way
}}}
   - /script {{{
     - better scripting examples such as:
        - rainbow text
        - automatic translation
        - emoticons
        - tweet
        - last.fm
}}}
 - new commands to add {{{
   (need dialog box for better management of lists:)
   - /ignore
   - /unignore
   - /invite
   - /uninvite
   - /kickban
   - /amsg
   - /awayall
   - /unawayall
}}}
}}}
 - dcc {{{
     - ui
       - contextmenu item "Send File" on nickList
       - open file dialog
       - file transfers tab
       - ___ is offering to send you [file]
       - save as dialog
       - drag/drop
     - implementation
       - choose wanIP or localIP based on connection to server (difficulty: nightmare)
       - cancel-able
       - retry-able
       - throttle-able?
     - NOTE(tso): looks like we already have basic SEND and ACCEPT working at
                  a proof-of-concept level
       -tso 7/27/2018 7:24:40 AM
}}}
 - make a proper About dialog {{{
   - icon, copyleft, (working) hyperlinks
   - autoscrolling credits list (optional)
   - 800 page LICENSE with click-to-agree (optional)
}}}
 - tabcomplete {{{
   - show nicks in the nickqueue first
   - for commands
     - autofill channel for commands that take channel as an argument
     - autofill themes for /theme
     - recent networks for /server 
       - might require caching information that we then have to give the user
         the option to delete... more work on top of work it never ends
}}}
 - richedit {{{
   - new features:
     - selection automatically goes to clipboard on MOUSEUP
     - contextmenu?

   - issues:
     - richedit needs to handle the tab key (\t)
     - richedit jumps up like 20 lines or scrolls past the end find out whats
       going on with that it has to do with when its focused or not
       dont just spam WM_VSCROLL although thats probably the solution

     - appendtext/linecount NOTE(tso): I don't know what I meant by this 7/27/2018 8:30:40 AM
       
     - WM_VSCROLL hack fires even when textBuffer has keyboard focus
       OR call to SetTextSelection() in AppendText() is doing it
       either way you can't scroll in a super active channel which is the only
       time you really need scroll
}}}
 - topicInput widget {{{
   - allow input 
   - send TOPIC
   - after: replace with a RichEdit to display colors and links 
}}}
 - highlight list {{{
    - store in config.json
    - probably should compile regexp for that since its more complex
    - needs dialog, maybe just use TextEdit
    - after: support for patterns
}}}
 - word filter {{{
    - e.g. "fuck" => "****"
    - or 4chan style "fam" => "desu"
}}}
}}}}}}
BUGS {{{
               priority    description
#1          panic: invalid hdc {{{
            UPDATE(tso) 7/27/18: removed stack traces from here because they're worthless
                                 added printfs to find offending handle and pinpoint which 
                                 widget is not handling WM_PAINT correctly

                                 but ofc since I did that it hasn't happened
                                 again

            UPDATE(tso) 2018-08-23 17:33:21p: STILL HASN'T HAPPENED

           - each time richedit stops drawing correctly, only replacing the last line
           - tabs in the widget stop drawing but the panes update (click and ctrl+tab still work)
           - tab widget "crashes" (disappears)
           - then this:
               panic: invalid hdc

               (stacktrace)
}}}
#2          make sure strings never have \0 in them {{{

<- :Term1nal!~metal@unaffiliated/f41l QUIT :Quit: Term1nal
panic: syscall: string with NUL passed to StringToUTF16


To see all goroutines, visit https://github.com/maruel/panicparse#GOTRACEBACK

1: running [locked]
    syscall syscall_windows.go:29 StringToUTF16(#3, 0xa, 0x1, 0xc0423ae0c0, 0x1)

    syscall syscall_windows.go:64 StringToUTF16Ptr([]uint16(#3 len=10 cap=825747252801))
    walk    listbox.go:120        (*ListBox).insertItemAt(*ListBox(#2), 2, 0x0, 0x0)
    walk    listbox.go:146        (*ListBox).resetItems(*ListBox(#2), 0x0, 0x0)
    walk    listbox.go:160        (*ListBox).attachModel.func1()
    walk    event.go:58           (*EventPublisher).Publish(*EventPublisher(#1))

    walk    models.go:51          (*ListModelBase).PublishItemsReset(*ListModelBase(#1))
    main    tab_channel.go:83     (*tabChannel).updateNickList.func1()
    walk    form.go:56            runSynchronized()
    walk    form.go:402           (*FormBase).Run(*FormBase(0xc0420b6a80), 0x0)
    main    main.go:182           main()
}}}}}}
LINKS {{{
IRC {{{
http://modern.ircdocs.horse/
https://defs.ircdocs.horse/defs/numerics.html
}}}
Tabs {{{

    About Tab Controls | Microsoft Docs
https://docs.microsoft.com/en-us/windows/desktop/Controls/tab-controls#tc_image_lists

    Hacking the Overall Background Color of a Windows Tab Control
http://www.glennslayden.com/code/win32/tab-control-background-brush

}}}
RichEdit stuff {{{
https://docs.microsoft.com/en-us/windows/desktop/Controls/bumper-rich-edit-rich-edit-control-reference
https://docs.microsoft.com/en-us/windows/desktop/api/Richedit/ns-richedit-tagrichedit_image_parameters
https://docs.microsoft.com/en-us/windows/desktop/api/Richedit/ns-richedit-_charformat
https://github.com/Microsoft/Windows-classic-samples/blob/master/Samples/DynamicDPI/cpp/SampleRichEditControl.cpp
https://docs.microsoft.com/en-us/windows/desktop/Controls/em-geteditstyle
https://docs.microsoft.com/en-us/windows/desktop/Controls/em-seteventmask
https://docs.microsoft.com/en-us/windows/desktop/Controls/rich-edit-control-event-mask-flags
https://docs.microsoft.com/en-us/windows/desktop/Controls/em-geteditstyleex
https://github.com/Alexpux/mingw-w64/blob/master/mingw-w64-headers/include/richedit.h
https://blogs.msdn.microsoft.com/murrays/2015/03/27/richedit-colors/
}}}
Useful/Misc {{{
    open urls from command line in any OS:
https://www.dwheeler.com/essays/open-files-urls.html

    get tab key messages in windows:
http://forums.codeguru.com/showthread.php?60142-How-to-trap-WM_KILLFOCUS-with-Tab-key

    numerical values for (some) Windows constants
https://doc.pcsoft.fr/en-US/?6510001
    windows messages:
https://wiki.winehq.org/List_Of_Windows_Messages
    typedefs for LONG DWORD LPSTR etc:
https://docs.microsoft.com/en-us/windows/desktop/WinProg/windows-data-types

    window styles
https://msdn.microsoft.com/en-us/library/windows/desktop/ms632600(v=vs.85).aspx

    setlayeredwindowattributes (transparency)
    example code:
https://msdn.microsoft.com/en-us/library/ms997507.aspx
    reference:
https://msdn.microsoft.com/en-us/library/windows/desktop/ms633540(v=vs.85).aspx

    might be what we're looking for:
https://docs.microsoft.com/en-us/windows/desktop/api/dwmapi/nf-dwmapi-dwmextendframeintoclientarea

    ownerdraw status bar text (lifesaver):
http://microsoft.public.win32.programmer.ui.narkive.com/dlstN3N0/change-color-of-text-in-status-bar

    FlashWindowEx
https://docs.microsoft.com/en-us/windows/desktop/api/winuser/ns-winuser-flashwinfo

    "The status bar control forgot to set the CtlType when it sends the WM_DRAWITEM message, 
    so the value is uninitialized garbage."
https://blogs.msdn.microsoft.com/oldnewthing/20141211-00/?p=43423
}}}}}}
{{{



























































DONT COME HERE {{{
THIS IS THE BAD ZONE {{{
WONTFIX {{{
   unstyled widgets:         literally impossible/can't be bothered {{{
   WONTFIX(tso): literally impossible, can't be bothered
   -tso 7/27/2018 7:56:43 AM
   - background/foreground color need to be applied to:
     - tabs        bg[ ] fg[ ]
     - pushbutton  bg[ ] fg[ ]
     - tableview   bg[ ] fg[ ]
}}}
   multiline send:           universally loathed {{{
   WONTFIX(tso): 1) multiline send is universally loathed 
   
                 2) implementing it is trivial, but enabling it for the one 
                    one time you want to paste 3 lines on purpose 
                    doesn't make up for the countless times you
                    accidentally paste 50 lines 

                 3) i don't want to enable spammers
  -tso 7/27/2018 8:04:28 AM
    - ctrl+enter: insert \n

    - split extra long text input
         - maxlen is 450..512
         - split on \n, send multiple lines
         - dialog box: warn about sending > 2 lines
}}}
  mouse input on tabWidget: literally impossible {{{
  WONTFIX(tso): not possible to get mouse or keyboard events on TabWidget afaict
                so rip the dream:
  -tso 2018-07-19 18:25:42
  - mouse input on tabWidget
      - middle-click to close tabs
      - scroll to cycle through tabs
      - context menu
      - mark as read
      - close
}}}
  flash window in task bar: annoying tbh {{{
- figure out how to make the window flash orange in the task bar
   - NOTE(tso): it's FlashWindow / FlashWindowEx but it's kind of an annoying feature
                when I think about it, probably won't do it 
     -tso 7/24/2018 12:36:47 PM
}}}}}}
TALKING TO MYSELF {{{
 - testing {{{
     - it would be nice if we could test the UI 
       without having to connect to a network 
         - one of each type of tab opens up 
         - each with examples of every type of information it can display in
           all states
         - just for the sake of designing
         - doesn't have any logic
         - separate application
         - would probably have to split project into subpackages (yuck)
           - no wait we could do what we did when testing richedit
             // +build ignore
             
             go build testapp.go *:not(main) # wait this isn't css

     - it would be nice if we could test the logic by faking a connection e.g.
       by sending raw IRC lines e.g.
       ":host@nowhere PRIVMSG #fakechannelfortesting :test\n"
       on a simple channel or something so there's nothing complicated about
       mocking a connection if only it were that easy
}}}
 - replace goirc with simple channels and goroutines {{{
    yay:
         - /reconnect is impossible for some reason
         - logger interface is inconvenient
         - no convenient way to capture unhandled server messages 
         - it would be trivial to mock connections by just sending raw IRC
           lines on the recv chan
           see MockConnection() in irc/irc.go
         - all handlers run in their own goroutines so even though messages
           always come in in a particular order the handlers can run in any
           order which is causing me all sorts of issues 
            - with LIST sometimes we get a LIST result before LISTSTART so the
              channellist tab hasn't been created yetbut the server sent
              LISTSTART first.
            - with NAMES and 332 sometimes one comes before the other and we
              need to create the channel tab in either case (and not on JOIN
              because user could have mode +b or channel could be +s) so it's
              a race condition and conceivably two tabs could open though I
              haven't seen that happen yet (I was consistently not getting 332
              displaying in the buffer but that was because the tab creation
              itself happens asynchronously as well)
            - this could all be a misunderstanding on my part but I'm pretty
              sure it would be better to dispatch handlers asynchronously only
              if/when the ui state is known instead of having to sync up
              inside of those handlers
              of course it would be much easier to understand if we just did
              everything line-by-line and didn't introduce goroutines at all
              but I worry that would cause a laggy/unresponsive chat
              experience like cybits used to exhibit whenever an http request
              took a long time.

              I don't see how it would be a problem to just:
              
              line := <-recv
              cmd, args := parseLine(line)
              switch cmd {
              // ...
              case PRIVMSG:
                if !tabExists(args.dest) {
                    createTab(args.dest)
                }
                go privmsgHandler(args)

                like I want to believe that would solve everything and seems
                less pants-on-head than

                go privmsgHandler()

                func privmsgHandler{
                    if !tabExists ...

                    like we're doing now

            like I don't get how doing some blocking stuff for a few cycles
            that's necessary to have a consistent state is a bad thing what am
            I missing?

    nay:
         - it works
         - has anti-flooding stuff
         - line parsing might be harder than it looks
}}}
 - replace walk with qt {{{
    ... for version 2.0

    yay:
         - inline images for emojis and embedding thumbnails 
         - richedit is hella annoying
         - can't capture global mouse/key events because child widgets steal
           focus
         - can't get mouse/key events on tabs in widget or apply custom
           background/text color/etc without reimplementing entire widget

    nay:
        - walk is hella comfy (it just worksة)
        - sunken cost fallacy (I've spent a lot of time getting stuff to work)
        - batteries included
            - screenshots
            - autourl detect
        
 - irc bouncer (separate project)
     - use public/private key pairs for authentication or something
     - basically just a relay/proxy that PING/PONGs when the user isn't connected
     - stores messages while user isn't connected, dumps (user configurable
       amount) on reconnect
     - autoreply or maybe just (Away)!
     - *** this sort of thing might be against IRC network rules need to look into
       what the policy is and/or how znc does it so well
       or just use znc
}}}}}}
TALKING TO MYSELF EVEN MORE: {{{

RE: inserting images in RichEdit {{{

nvm OLE is exceptionally awful and I can't figure out how to get the
OBJECTPOSITIONS messages so fuck it if we want more out of the UI than pretty
colors there's always walk.WebView, electron, Qt, or reinventing the wheel
(render text and handle pointer events for text selection and put stuff on the
clipboard manually and invent a scrollbar and waste like a solid year on that)

-tso, July Sun Jul 8 07:49:26 2018 -0400
}}}
RE: splitting main into subpackages {{{

or "issues nobody raised yet but inevitably will part 1"

who's going to import and use github.com/generaltso/chopsuey/widgets
or github.com/generaltso/chopsuey/colors or messages or whatever?
nobody that's who because most of this code is specific to this application

if the argument is well you should make the code decoupled for reuse,
who other than another client or an overly complicated bot is going 
to use this code? authors of those things tend to want to roll their own
anyway. 

if it's for testing purposes, there's no reason not to add tests for
the main package since `go test` doesn't call main and most things are
testable as they are right now (with the notable exception of not being able
to mock the serverConnection which will go away if/when I replace goirc)

and if the argument is it will make the code easier to maintain I would kindly
ask for an example because I've never seen a project where having to grep -r
(or is it -R) and jump around multiple files in multiple directories trying to
figure out where functions are called and things are happening makes anything
easier to understand

Furthermore, worrying about which symbols need to be exported or needing to
use .mod files is an undue source of complexity and headaches for a project of
this scope

Splitting an **application** into multiple subpackages is an antipattern imho
unless that application has what are effectively its own libraries that are
potentially useful for other applications to import. In that case, I'm not
opposed to the idea, in fact I made a basic webapp framework based on what I
did in caffochoco and caffochoco-mythril (I lost what I think was the only copy
of the code to a hard drive crash...) but in that case where you can get
started on a new application by just import'ing what you already have *is*
really useful but tbh that's simply not the case here and separating all that
logic would be a lot of work for literally no gain, the examples provided with
walk are better at showing how to scaffold a new app 

If you follow what I'm saying then you'll understand why the (go) channels-
based irc connection is its own package

If you're still convinced I'm wrong I encourge you to refactor everything
yourself and fork (off)

WONTFIX
-tso 7/14/2018 8:14:06 AM

}}}}}}}}}}}}}}}
# vim: tw=70 ft=help fdm=marker fmr={{{,}}} fdl=0 fen:
